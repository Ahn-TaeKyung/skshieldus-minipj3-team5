// src/pages/ChatbotPage.jsx

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { ArrowLeft } from 'lucide-react';
import ResumeUploadSection from '../components/ResumeUploadSection';
import ChatWindow from '../components/ChatWindow';
import ChatInput from '../components/ChatInput';
// --- üí° 1. ÏÉàÎ°úÏö¥ Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞Î•º import Ìï©ÎãàÎã§. ---
import { MOCK_CONVERSATIONS } from '../mocks/data.js';

function ChatbotPage() {
    const { id: urlId } = useParams();
    const navigate = useNavigate();

    const [conversationId, setConversationId] = useState(null);
    const [messages, setMessages] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [pageTitle, setPageTitle] = useState("AI Ïª§Î¶¨Ïñ¥ Ï±óÎ¥á");

    useEffect(() => {
        // --- üí° 2. urlIdÎ•º ÏÇ¨Ïö©Ìï¥ Ïò¨Î∞îÎ•∏ ÎåÄÌôî Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÎäî Î°úÏßÅÏùÑ ÏàòÏ†ïÌï©ÎãàÎã§. ---
        if (urlId) {
            setIsLoading(true);
            
            // Ï†ÑÏ≤¥ Î™©Î°ùÏóêÏÑú urlIdÏôÄ ÏùºÏπòÌïòÎäî ÎåÄÌôî Ï†ïÎ≥¥Î•º Ï∞æÏäµÎãàÎã§.
            const loadedData = MOCK_CONVERSATIONS.find(conv => conv._id === urlId);

            if (loadedData) {
                // Ï∞æÏùÄ Îç∞Ïù¥ÌÑ∞Ïùò chatHistoryÎ•º ÏÇ¨Ïö©Ìï©ÎãàÎã§.
                const formattedMessages = loadedData.chatHistory.map(msg => ({
                    sender: msg.role === 'assistant' ? 'ai' : 'user',
                    text: msg.content
                }));
                
                setMessages(formattedMessages);
                setPageTitle(loadedData.title);
                setConversationId(loadedData._id);
            } else {
                console.error("Error: Conversation ID not found", urlId);
                navigate('/history'); // ÏùºÏπòÌïòÎäî IDÍ∞Ä ÏóÜÏúºÎ©¥ ÌûàÏä§ÌÜ†Î¶¨ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
            }
            setIsLoading(false);
        } else {
            // ÏÉà ÎåÄÌôî ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
            setMessages([]);
            setPageTitle("AI Ïª§Î¶¨Ïñ¥ Ï±óÎ¥á (ÏÉà ÎåÄÌôî)");
            setConversationId(null);
        }
    }, [urlId, navigate]);

    // (handleSendMessage, handleContextSubmit Îì± ÎÇòÎ®∏ÏßÄ Ìï∏Îì§Îü¨Îäî Ïù¥Ï†ÑÍ≥º ÎèôÏùº)
    const handleSendMessage = async (messageText) => { /* ... */ };
    const handleContextSubmit = (context) => { /* ... */ };

    return (
        <div className="min-h-screen bg-gray-100 dark:bg-gray-900 font-inter">
            <div className="container mx-auto p-6 flex flex-col h-screen">
                <div className="flex items-center mb-6 flex-shrink-0">
                    <Link to={urlId ? "/history" : "/dashboard"} className="p-2 mr-4 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700">
                        <ArrowLeft className="w-6 h-6 text-gray-800 dark:text-gray-200" />
                    </Link>
                    <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-50 truncate">
                        {pageTitle}
                    </h1>
                </div>

                <div className="flex flex-1 gap-6 overflow-hidden">
                    {/* IDÍ∞Ä ÏóÜÏùÑ Îïå (ÏÉà ÎåÄÌôî) => 2Îã® Î†àÏù¥ÏïÑÏõÉ */}
                    {!urlId && (
                        <>
                            <ResumeUploadSection onAnalyzeProp={handleContextSubmit} isLoading={isLoading} />
                            <main className="flex-1 flex flex-col bg-white rounded-2xl shadow-lg border border-gray-200 dark:bg-gray-800 dark:border-gray-700 h-full">
                                <ChatWindow messages={messages} isThinking={isLoading} />
                                <ChatInput onSendMessage={handleSendMessage} isLoading={isLoading} />
                            </main>
                        </>
                    )}

                    {/* IDÍ∞Ä ÏûàÏùÑ Îïå (ÎåÄÌôî Ïù¥Ïñ¥ÌïòÍ∏∞) => 1Îã® Ï±ÑÌåÖÏ∞Ω Î†àÏù¥ÏïÑÏõÉ */}
                    {urlId && (
                        <main className="w-full flex flex-col bg-white rounded-2xl shadow-lg border border-gray-200 dark:bg-gray-800 dark:border-gray-700 h-full">
                            <ChatWindow messages={messages} isThinking={isLoading} />
                            <ChatInput onSendMessage={handleSendMessage} isLoading={isLoading} />
                        </main>
                    )}
                </div>
            </div>
        </div>
    );
}

export default ChatbotPage;